CREATE TABLE user_info(
    user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL
);

CREATE TABLE friendship(
    user_id_a INT,
    user_id_b INT,
    PRIMARY KEY(user_id_a, user_id_b),
    FOREIGN KEY(user_id_a) REFERENCES user_info(user_id) ON DELETE CASCADE,
    FOREIGN KEY(user_id_b) REFERENCES user_info(user_id) ON DELETE CASCADE
);

CREATE TABLE subscription(
    subscription_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    payment_date TIMESTAMP NOT NULL,
    payment_method VARCHAR(10) NOT NULL,
    FOREIGN KEY(user_id) REFERENCES user_info(user_id) ON DELETE CASCADE,
    CHECK(payment_method IN ('klarna', 'swish', 'card', 'bitcoin'))
);

CREATE TABLE post(
    post_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
        CHECK(post_id > 0),
    user_id INT NOT NULL,
    title VARCHAR(255), -- allowed to be null
    date TIMESTAMP NOT NULL,
    place VARCHAR(255), -- allowed to be null
    FOREIGN KEY(user_id) REFERENCES user_info(user_id) ON DELETE CASCADE
);

CREATE TABLE video_post (
    post_id INT PRIMARY KEY,
    video_url VARCHAR(2048) NOT NULL,
    codec VARCHAR(255) NOT NULL,
    FOREIGN KEY(post_id) REFERENCES post(post_id) ON DELETE CASCADE
);

CREATE TABLE image_post(
    post_id INT PRIMARY KEY,
    image_url VARCHAR(2048) NOT NULL,
    filter VARCHAR(255), -- allowed to be null
    FOREIGN KEY(post_id) REFERENCES post(post_id) ON DELETE CASCADE
);

CREATE TABLE text_post(
    post_id INT PRIMARY KEY,
    text_content TEXT NOT NULL,
    FOREIGN KEY(post_id) REFERENCES post(post_id) ON DELETE CASCADE
);

CREATE TABLE post_tags(
    post_id INT,
    tag VARCHAR(255)
        CHECK(tag IN ('crypto', 'studying', 'question', 'social')),
    PRIMARY KEY(post_id, tag),
    FOREIGN KEY(post_id) REFERENCES post(post_id) ON DELETE CASCADE
);

CREATE TABLE upvote(
    post_id INT,
    user_id INT,
    timestamp TIMESTAMP NOT NULL,
    PRIMARY KEY(post_id, user_id),
    FOREIGN KEY(post_id) REFERENCES post(post_id) ON DELETE CASCADE,
    FOREIGN KEY(user_id) REFERENCES user_info(user_id) ON DELETE CASCADE
);

CREATE TABLE event(
    event_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    place VARCHAR(255) NOT NULL,
    startDate DATE NOT NULL,
    endDate DATE NOT NULL,
    FOREIGN KEY(user_id) REFERENCES user_info(user_id) ON DELETE CASCADE,
    CHECK(startDate <= endDate)
);

CREATE TABLE attendee(
    event_id INT,
    user_id INT,
    timestamp TIMESTAMP NOT NULL,
    PRIMARY KEY(event_id, user_id),
    FOREIGN KEY(event_id) REFERENCES event(event_id) ON DELETE CASCADE,
    FOREIGN KEY(user_id) REFERENCES user_info(user_id) ON DELETE CASCADE
);

GRANT ALL PRIVILEGES ON TABLE user_info to nohhy;
GRANT ALL PRIVILEGES ON TABLE friendship to nohhy;
GRANT ALL PRIVILEGES ON TABLE subscription to nohhy;
GRANT ALL PRIVILEGES ON TABLE post to nohhy;
GRANT ALL PRIVILEGES ON TABLE video_post to nohhy;
GRANT ALL PRIVILEGES ON TABLE image_post to nohhy;
GRANT ALL PRIVILEGES ON TABLE text_post to nohhy;
GRANT ALL PRIVILEGES ON TABLE post_tags to nohhy;
GRANT ALL PRIVILEGES ON TABLE upvote to nohhy;
GRANT ALL PRIVILEGES ON TABLE event to nohhy;
GRANT ALL PRIVILEGES ON TABLE attendee to nohhy;