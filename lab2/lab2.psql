/* Assignment 1 */

SELECT title, STRING_AGG(tag, ', ') AS tags
FROM post
NATURAL JOIN posttag
GROUP BY post.postid
ORDER BY title;

/* Assignment 2 */

SELECT postid, title, rank FROM
(
    SELECT postid, title, RANK() OVER (
    	PARTITION BY tag
    	ORDER BY likes DESC
    ) AS rank
    FROM (
    	SELECT post.postid, title, COUNT(*) AS likes, tag
    	FROM post
    	JOIN likes ON likes.postid = post.postid
    	JOIN posttag ON posttag.postid = post.postid
    	GROUP BY post.postid, tag
    ) post_and_likes
    WHERE tag = '#leadership'
) AS result
WHERE rank <= 5;

/* Assignment 3 */
SELECT
    weeks.week,
    COALESCE(new_customers, 0) AS new_customers,
    COALESCE(kept_customers, 0) AS kept_customers,
    COALESCE(activity, 0) AS activity
FROM GENERATE_SERIES(1, 30) AS weeks(week)
LEFT JOIN (
    SELECT
        week,
        SUM(CASE WHEN is_new THEN 1 ELSE 0 END) AS new_customers,
        SUM(CASE WHEN NOT is_new THEN 1 ELSE 0 END) AS kept_customers
    FROM (
        SELECT
            date_part('week', date) AS week,
            MIN(date) OVER (PARTITION BY userid) = date AS is_new
        FROM subscription
    ) subscriptions
    WHERE week <= 30
    GROUP BY week
) AS customer_data
ON customer_data.week = weeks.week
LEFT JOIN (
    SELECT
        date_part('week', date) AS week,
        COUNT(*) AS activity
    FROM post
    GROUP BY week
) AS activity_data
ON activity_data.week = weeks.week
ORDER BY week;

/* Assignment 4 */
SELECT
    name,
    COALESCE(f1.has_friend OR f2.has_friend, false) AS has_friend,
    registration_date
FROM users
NATURAL JOIN (
    SELECT userid, MIN(date) as registration_date
    FROM subscription
    GROUP BY userid
) AS sub
LEFT JOIN (
    SELECT DISTINCT(userid), true AS has_friend FROM friend
) AS f1
ON f1.userid = users.userid
LEFT JOIN (
    SELECT DISTINCT(friendid), true AS has_friend FROM friend
) AS f2
ON f2.friendid = users.userid
WHERE date_part('month', registration_date) = 1
ORDER BY name;

/* Assignment 5 */
WITH RECURSIVE rec AS (
    SELECT users.userid, name, friendid as friend_id
    FROM users
    JOIN friend
    ON friend.userid = users.userid
    WHERE users.userid = 20

    UNION

    SELECT users.userid, users.name, friend.friendid as friend_id
    FROM users
    JOIN rec
    ON users.userid = rec.friend_id
    LEFT JOIN friend
    ON friend.userid = users.userid
)
SELECT * FROM rec;